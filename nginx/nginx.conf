events {
    worker_connections 1024; # Default, adjust as needed
}

http {
    # Upstream for GET /api/books and GET /api/books/:id
    upstream api_get_books_upstream {
        server api_get_books:3001;
    }

    # Upstream for POST /api/books
    upstream api_post_books_upstream {
        server api_post_books:3002;
    }

    # Upstream for PUT /api/books/:id
    upstream api_put_books_upstream {
        server api_put_books:3003;
    }

    # Upstream for DELETE /api/books/:id
    upstream api_delete_books_upstream {
        server api_delete_books:3004;
    }

    # Upstream for frontend rendering (/*)
    upstream frontend_renderer_upstream {
        server frontend_renderer:3005;
    }

    server {
        listen 80;
        server_name localhost; # Or your actual domain

        # It's generally recommended to set these for proxied requests
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings (optional, good defaults)
        proxy_connect_timeout       60s;
        proxy_send_timeout          60s;
        proxy_read_timeout          60s;
        send_timeout                60s;

        # Buffer settings (optional, good defaults)
        proxy_buffers               32 4k; # Number and size of buffers
        proxy_buffer_size           4k;    # Size of the buffer used for reading the first part of the response

        # Handling /api/books and /api/books/:id
        location ~ ^/api/books(?:/([^/]+))?$ {
            # The regex captures the optional ID part.
            # $1 will contain the ID if present.

            # Default to GET service if no specific method matches below,
            # or handle as an error / specific fallback.
            # For now, we'll rely on the method checks.

            if ($request_method = GET) {
                proxy_pass http://api_get_books_upstream;
            }
            if ($request_method = POST) {
                # POST should typically be to /api/books, not /api/books/:id
                # Add more specific location block if needed, or rely on service to handle.
                proxy_pass http://api_post_books_upstream;
            }
            if ($request_method = PUT) {
                proxy_pass http://api_put_books_upstream;
            }
            if ($request_method = DELETE) {
                proxy_pass http://api_delete_books_upstream;
            }

            # Fallback or error for unhandled methods on /api/books
            # If none of the above if conditions are met, Nginx might return 403 or similar.
            # Or, you can explicitly return an error.
            # For example, if a PATCH request comes, it won't be routed by these 'if's.
            # A more robust way for methods is to use separate location blocks if complexity grows,
            # or ensure backend services correctly handle method errors.
        }

        # Handling all other requests (frontend)
        location / {
            proxy_pass http://frontend_renderer_upstream;
        }

        # Optional: Add specific location for CSS if frontend_renderer serves it from /css
        # location /css/ {
        #     proxy_pass http://frontend_renderer_upstream;
        # }
        # This is covered by the location / block if paths match.
    }
}
